(()=>{"use strict";var t=function(t){void 0===t&&(t=!1);var n=document.getElementById("slider"),e=document.getElementById("sliderval"),i=parseInt(n.value);return e.innerText=(i/10).toString(),t&&console.log(i),i},n=function(t){void 0===t&&(t=!1);var n=document.getElementById("slider2"),e=document.getElementById("sliderval2"),i=parseInt(n.value);return e.innerText=i.toString(),t&&console.log(i),i},e=function(e){var i=function(i,r){for(var o,l,c=function(n){return(n-e.width/2)/(e.width/(6/(t()/10)))}(i),a=function(n){return(n-e.height/2)/(e.height/(6/(t()/10)))}(r),u=0,h=0,s=0,f=n(),d=0;u*u+h*h<=4&&s<f;)d=u*u-h*h+c,h=2*u*h+a,u=d,s+=1;(o=s)===(l=f)?e.fill(0):e.cg.fillStyle="hsl("+o*(360/l)+", 100%, 50%)",e.pixel(i,r)};e.background(255),e.fill(255);for(var r=0;r<e.width;r++)for(var o=0;o<e.width;o++)i(o,r)},i=function(t){var n=this;this.fill=function(t,e,i){e||(e=t),i||(i=t),n.cg.fillStyle="rgb("+t+","+e+","+i+")"},this.background=function(t,e,i){var r=n.cg.fillStyle;n.fill(t,e,i),n.cg.fillRect(0,0,n.width,n.height),n.cg.fillStyle=r},this.rect=function(t,e,i,r){n.cg.fillRect(t,e,i,r)},this.pixel=function(t,e,i){void 0===i&&(i=n.pixelScale),n.cg.fillRect(t,e,i,i)},this.canvas=document.getElementById(t),this.cg=this.canvas.getContext("2d"),this.width=window.innerWidth<window.innerHeight?window.innerWidth:window.innerHeight,this.height=window.innerWidth<window.innerHeight?window.innerWidth:window.innerHeight,this.canvas.width=this.width,this.canvas.height=this.height,this.pixelScale=1};window.onload=function(){var r,o=new i("c"),l=function(){r=Date.now(),r,t(),n(),window.requestAnimationFrame(l)};Date.now(),function(t){setTimeout((function(){return n=void 0,i=void 0,o=function(){return function(t,n){var e,i,r,o,l={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;l;)try{if(e=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return l.label++,{value:o[1],done:!1};case 5:l.label++,i=o[1],o=[0];continue;case 7:o=l.ops.pop(),l.trys.pop();continue;default:if(!((r=(r=l.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){l=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){l.label=o[1];break}if(6===o[0]&&l.label<r[1]){l.label=r[1],r=o;break}if(r&&l.label<r[2]){l.label=r[2],l.ops.push(o);break}r[2]&&l.ops.pop(),l.trys.pop();continue}o=n.call(t,l)}catch(t){o=[6,t],i=0}finally{e=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}}(this,(function(n){switch(n.label){case 0:return[4,e(t)];case 1:return n.sent(),[2]}}))},new((r=void 0)||(r=Promise))((function(t,e){function l(t){try{a(o.next(t))}catch(t){e(t)}}function c(t){try{a(o.throw(t))}catch(t){e(t)}}function a(n){var e;n.done?t(n.value):(e=n.value,e instanceof r?e:new r((function(t){t(e)}))).then(l,c)}a((o=o.apply(n,i||[])).next())}));var n,i,r,o}),1)}(o),window.requestAnimationFrame(l)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,