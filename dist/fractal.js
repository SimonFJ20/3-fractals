(()=>{"use strict";var i=function(i){void 0===i&&(i=!1);var t=document.getElementById("slider"),n=document.getElementById("sliderval"),e=parseInt(t.value);return n.innerText=(e/10).toString(),i&&console.log(e),e},t=function(t,n){i(),function(i){void 0===i&&(i=!1);var t=document.getElementById("slider2"),n=document.getElementById("sliderval2"),e=parseInt(t.value);n.innerText=e.toString(),i&&console.log(e)}(),function(t){i(),t.background(0),t.cg.strokeStyle="rgb(255, 255, 255)";var n=i(),e=function(i,o,c,l,h){if(!(h>=n)){console.log(h);var g=i,d=o,r=2/3*i+1/3*c,a=2/3*o+1/3*l,s=.5*i+.5*c-.289*(l-o),w=.5*o+.5*l+.289*(c-i),u=1/3*i+2/3*c,f=1/3*o+2/3*l,v=c,m=l;n-h==1&&function(i,n,e,o,c,l,h,g,d,r){t.cg.beginPath(),t.cg.moveTo(i,n),t.cg.lineTo(e,o),t.cg.lineTo(c,l),t.cg.lineTo(h,g),t.cg.lineTo(d,r),t.cg.stroke()}(g,t.height-100-d,r,t.height-100-a,s,t.height-100-w,u,t.height-100-f,v,t.height-100-m);var y=r,S=a,I=s,T=w,x=s,b=w,p=u,B=f,E=u,k=f,H=v,W=m;e(g,d,r,a,h+1),e(y,S,I,T,h+1),e(x,b,p,B,h+1),e(E,k,H,W,h+1)}};e(0,0,t.width,0,0)}(t)},n=function(i){var t=this;this.fill=function(i,n,e){n||(n=i),e||(e=i),t.cg.fillStyle="rgb("+i+","+n+","+e+")"},this.background=function(i,n,e){var o=t.cg.fillStyle;t.fill(i,n,e),t.cg.fillRect(0,0,t.width,t.height),t.cg.fillStyle=o},this.rect=function(i,n,e,o){t.cg.fillRect(i,n,e,o)},this.pixel=function(i,n,e){void 0===e&&(e=t.pixelScale),t.cg.fillRect(i,n,e,e)},this.canvas=document.getElementById(i),this.cg=this.canvas.getContext("2d"),this.width=window.innerWidth<window.innerHeight?window.innerWidth:window.innerHeight,this.height=window.innerWidth<window.innerHeight?window.innerWidth:window.innerHeight,this.canvas.width=this.width,this.canvas.height=this.height,this.pixelScale=1};window.onload=function(){var i,e=new n("c"),o=function(){i=Date.now(),i,t(e),window.requestAnimationFrame(o)};Date.now(),window.requestAnimationFrame(o)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,